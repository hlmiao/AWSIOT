#include<WiFi.h>
#include<DHT.h>
#include<AWS_IOT.h>
#include <time.h>
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 3600;
const int daylightOffset_sec = 3600;

#define DHT_PIN 15 // pin connected to data pin of DHT11
#define DHT_TYPE DHT11  // Type of the DHT Sensor, DHT11/DHT22

#define WIFI_SSID "sid" // SSID of your WIFI
#define WIFI_PASSWD "password" //your wifi password

#define CLIENT_ID "*****"// thing unique ID, this id should be unique among all things associated with your AWS account
#define MQTT_TOPIC "$aws/things/thingname/shadow/update" //topic for the MQTT data
#define AWS_HOST "endpoint.amazonaws.com" // your host for uploading data to AWS

DHT dht(DHT_PIN, DHT_TYPE);
AWS_IOT aws;

void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}

  void setup(){
  Serial.begin(115200);
  Serial.print("\nInitializing thing Temp_Humidity_DHT11_0 \n");
  Serial.print("\n  Initializing WIFI: Connecting to ");
  Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWD);
  Serial.print("  ");
  while(WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n  Connected.\n  Done");

  Serial.print("\n  Initializing DHT11...");
  dht.begin();
  Serial.println("  Done.");

  Serial.println("\n  Initializing connetction to AWS....");
  if(aws.connect(AWS_HOST, CLIENT_ID) == 0){ // connects to host and returns 0 upon success
    Serial.println("  Connected to AWS\n  Done.");
  }
  else {
    Serial.println("  Connection failed!\n make sure your subscription to MQTT in the test page");
  }
  Serial.println("  Done.\n\nDone.\n");
  
  //init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
}

void loop(){
  // read temperature and humidity
  float temp = dht.readTemperature(); // return temperature in °C
  float humidity = dht.readHumidity();// return humidity in %

  // check whether reading was successful or not
  if(temp == NAN || humidity == NAN){ // NAN means no available data
    Serial.println("Reading failed.");
  }
  else{
    //create string payload for publishing
    String temp_humidity = "Temperature: ";
    temp_humidity += String(temp);
    temp_humidity += "°C Humidity: ";
    temp_humidity += String(humidity);
    temp_humidity += " %";

   
   // Converting the float data to char arrays
    char sTemp[10], sHumi[10];
    dtostrf(humidity, 6, 2, sHumi);
    dtostrf(temp, 6, 2, sTemp);
  
    // Creating the thing shadow to be sent to aws iot
    char shadow[100];
    Serial.println("Publishing:--------------------- ");
    printLocalTime();
    strcpy(shadow, "{\"state\":{\"reported\": {\"Humidity\":");
    //strcpy(shadow, "{\"Humidity\":");
    strcat(shadow, sHumi);
    strcat(shadow, ", \"Temperature\":");
    strcat(shadow, sTemp);
    //strcat(shadow, ", \"Time\":");
    strcat(shadow, "}}}");
    Serial.println(shadow);

    Serial.println(aws.publish(MQTT_TOPIC, shadow));
     if(aws.publish(MQTT_TOPIC, shadow) == 0){// publishes payload and returns 0 upon success
      Serial.println("Success\n");
    }

  delay(1000);
}
}
